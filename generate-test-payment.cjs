const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function generateTestPayment() {
  try {
    console.log('üí≥ G√©n√©ration d\'un paiement test');
    console.log('=' .repeat(50));

    // 1. R√©cup√©rer l'utilisateur
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'mdansoko@mangoo.tech')
      .single();

    if (userError || !user) {
      console.error('‚ùå Utilisateur non trouv√©:', userError?.message);
      return;
    }

    console.log('üë§ Utilisateur:', user.email);
    console.log('üì¶ Pack actuel:', user.selected_pack);
    console.log('');

    // 2. R√©cup√©rer les packs disponibles
    const { data: packs, error: packsError } = await supabase
      .from('packs')
      .select('*')
      .order('price', { ascending: true });

    if (packsError) {
      console.error('‚ùå Erreur r√©cup√©ration packs:', packsError.message);
      return;
    }

    console.log('üì¶ Packs disponibles:');
    packs.forEach((pack, index) => {
      const isCurrent = user.selected_pack === pack.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '').replace(/√©/g, 'e');
      console.log(`  ${index + 1}. ${pack.name} - ${pack.price} XOF ${isCurrent ? '(ACTUEL)' : ''}`);
      console.log(`     ID: ${pack.id}`);
    });
    console.log('');

    // 3. Choisir un pack diff√©rent pour le test (Pack Visibilit√©)
    const testPack = packs.find(p => p.name === 'Pack Visibilit√©');
    if (!testPack) {
      console.error('‚ùå Pack Visibilit√© non trouv√© pour le test');
      return;
    }

    console.log('üéØ Pack s√©lectionn√© pour le test:', testPack.name);
    console.log('üí∞ Prix:', testPack.price, 'XOF');
    console.log('üÜî ID:', testPack.id);
    console.log('');

    // 4. Cr√©er un token d'authentification temporaire
    console.log('üîê Cr√©ation d\'une session d\'authentification...');
    
    // Utiliser le service role key pour cr√©er une session
    const { data: authData, error: authError } = await supabase.auth.admin.generateLink({
      type: 'magiclink',
      email: user.email,
      options: {
        redirectTo: 'http://localhost:3000/dashboard'
      }
    });

    if (authError) {
      console.error('‚ùå Erreur g√©n√©ration lien:', authError.message);
      console.log('‚ö†Ô∏è Vous devrez vous connecter manuellement pour tester');
    }

    // 5. G√©n√©rer l'URL de test
    const webhookUrl = `${process.env.SUPABASE_URL}/functions/v1/stripe-webhook`;
    const createSessionUrl = `${process.env.SUPABASE_URL}/functions/v1/create-checkout-session`;

    console.log('üåê URLs importantes:');
    console.log('  - Webhook Stripe:', webhookUrl);
    console.log('  - Create Session:', createSessionUrl);
    console.log('');

    // 6. Instructions de test d√©taill√©es
    console.log('üß™ INSTRUCTIONS DE TEST D√âTAILL√âES');
    console.log('=' .repeat(50));
    console.log('');
    
    console.log('üìã √âTAPE 1: Pr√©parer le test');
    console.log('1. Ouvrez le Dashboard Supabase dans un onglet');
    console.log('2. Allez dans Edge Functions > stripe-webhook > Logs');
    console.log('3. Gardez cette page ouverte pour voir les logs en temps r√©el');
    console.log('');
    
    console.log('üìã √âTAPE 2: V√©rifier la configuration Stripe');
    console.log('1. Ouvrez Stripe Dashboard > Webhooks');
    console.log('2. V√©rifiez que votre webhook pointe vers:', webhookUrl);
    console.log('3. V√©rifiez que les √©v√©nements suivants sont activ√©s:');
    console.log('   - checkout.session.completed');
    console.log('   - invoice.payment_succeeded');
    console.log('4. Notez le secret du webhook (commence par whsec_)');
    console.log('');
    
    console.log('üìã √âTAPE 3: Effectuer le paiement test');
    console.log('1. Connectez-vous sur votre application avec:', user.email);
    console.log('2. Allez sur la page de s√©lection des packs');
    console.log('3. S√©lectionnez "Pack Visibilit√©" (diff√©rent du pack actuel)');
    console.log('4. Proc√©dez au paiement avec les donn√©es de test Stripe:');
    console.log('   - Num√©ro de carte: 4242 4242 4242 4242');
    console.log('   - Date d\'expiration: 12/34');
    console.log('   - CVC: 123');
    console.log('   - Code postal: 12345');
    console.log('');
    
    console.log('üìã √âTAPE 4: V√©rifier les logs');
    console.log('1. Imm√©diatement apr√®s le paiement, v√©rifiez les logs Supabase');
    console.log('2. Recherchez les messages suivants:');
    console.log('   - "üõí SESSION CHECKOUT COMPL√âT√âE"');
    console.log('   - "üìã M√âTADONN√âES SESSION"');
    console.log('   - "üîÑ MISE √Ä JOUR SELECTED_PACK"');
    console.log('   - "‚úÖ selected_pack mis √† jour"');
    console.log('');
    
    console.log('üìã √âTAPE 5: V√©rifier le r√©sultat');
    console.log('1. Rechargez votre dashboard');
    console.log('2. V√©rifiez que le pack affich√© a chang√©');
    console.log('3. V√©rifiez dans la base de donn√©es:');
    console.log('   - Table users: selected_pack doit √™tre "pack-visibilite"');
    console.log('   - Table user_packs: Pack Visibilit√© doit √™tre "active"');
    console.log('');
    
    console.log('üö® EN CAS DE PROBL√àME:');
    console.log('1. V√©rifiez que STRIPE_WEBHOOK_SECRET est correct');
    console.log('2. V√©rifiez que l\'URL du webhook est accessible');
    console.log('3. Testez le webhook manuellement depuis Stripe Dashboard');
    console.log('4. V√©rifiez les logs d\'erreur dans Supabase');
    console.log('');
    
    console.log('üîß COMMANDES UTILES APR√àS LE TEST:');
    console.log('- V√©rifier l\'√©tat: node check-webhook-config.cjs');
    console.log('- Diagnostiquer: node debug-stripe-webhook.cjs mdansoko@mangoo.tech');
    console.log('');
    
    console.log('‚úÖ Pr√™t pour le test!');
    console.log('Suivez les √©tapes ci-dessus et surveillez les logs en temps r√©el.');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

generateTestPayment();
// Script de v√©rification finale du syst√®me de paiement et d'attribution des packs

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

// Utiliser la cl√© de service pour bypasser RLS
const supabaseAdmin = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Client normal pour tester RLS
const supabaseClient = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function finalSystemVerification() {
  try {
    console.log('üîç V√âRIFICATION FINALE DU SYST√àME DE PAIEMENT');
    console.log('=' .repeat(60));
    
    // 1. V√©rifier la coh√©rence des donn√©es
    console.log('\n1. üìä V√âRIFICATION DE LA COH√âRENCE DES DONN√âES');
    
    const { data: users, error: usersError } = await supabaseAdmin
      .from('users')
      .select(`
        id,
        email,
        selected_pack,
        user_packs!inner(
          id,
          pack_id,
          status,
          packs(name)
        )
      `)
      .eq('user_packs.status', 'active');
    
    if (usersError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs:', usersError.message);
      return;
    }
    
    console.log(`üë• Utilisateurs avec packs actifs: ${users?.length || 0}`);
    
    let syncedUsers = 0;
    let unsyncedUsers = 0;
    
    users?.forEach((user, index) => {
      const activePack = user.user_packs?.[0];
      const packSlug = activePack?.packs?.name?.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '') || 'free';
      const isSync = user.selected_pack === packSlug;
      
      console.log(`   ${index + 1}. ${user.email}`);
      console.log(`      selected_pack: ${user.selected_pack}`);
      console.log(`      pack actif: ${packSlug} (${activePack?.packs?.name})`);
      console.log(`      synchronis√©: ${isSync ? '‚úÖ' : '‚ùå'}`);
      
      if (isSync) {
        syncedUsers++;
      } else {
        unsyncedUsers++;
      }
    });
    
    console.log(`\nüìà R√©sum√© synchronisation:`);
    console.log(`   ‚úÖ Utilisateurs synchronis√©s: ${syncedUsers}`);
    console.log(`   ‚ùå Utilisateurs non synchronis√©s: ${unsyncedUsers}`);
    
    // 2. V√©rifier les statistiques g√©n√©rales
    console.log('\n2. üìà STATISTIQUES G√âN√âRALES');
    
    const { data: allUsers, error: allUsersError } = await supabaseAdmin
      .from('users')
      .select('id', { count: 'exact' });
    
    const { data: activePacks, error: activePacksError } = await supabaseAdmin
      .from('user_packs')
      .select('id', { count: 'exact' })
      .eq('status', 'active');
    
    const { data: allUserPacks, error: allUserPacksError } = await supabaseAdmin
      .from('user_packs')
      .select('id', { count: 'exact' });
    
    const { data: userServices, error: userServicesError } = await supabaseAdmin
      .from('user_services')
      .select('id', { count: 'exact' })
      .eq('status', 'active');
    
    const { data: availablePacks, error: availablePacksError } = await supabaseAdmin
      .from('packs')
      .select('id, name, price', { count: 'exact' })
      .eq('is_active', true);
    
    if (!allUsersError) {
      console.log(`üë• Total utilisateurs: ${allUsers?.length || 0}`);
    }
    if (!activePacksError) {
      console.log(`üì¶ Packs actifs: ${activePacks?.length || 0}`);
    }
    if (!allUserPacksError) {
      console.log(`üìä Total user_packs: ${allUserPacks?.length || 0}`);
    }
    if (!userServicesError) {
      console.log(`üîß Services utilisateur actifs: ${userServices?.length || 0}`);
    }
    if (!availablePacksError) {
      console.log(`üéÅ Packs disponibles: ${availablePacks?.length || 0}`);
      availablePacks?.forEach(pack => {
        console.log(`   - ${pack.name}: ${pack.price} FCFA`);
      });
    }
    
    // 3. Tester les politiques RLS
    console.log('\n3. üîí TEST DES POLITIQUES RLS');
    
    // Test avec client anonyme (devrait √©chouer)
    const { data: rlsTestAnon, error: rlsErrorAnon } = await supabaseClient
      .from('user_packs')
      .select('*')
      .limit(1);
    
    if (rlsErrorAnon || !rlsTestAnon || rlsTestAnon.length === 0) {
      console.log('‚úÖ RLS fonctionne: client anonyme ne peut pas acc√©der aux user_packs');
    } else {
      console.log('‚ö†Ô∏è RLS pourrait avoir un probl√®me: client anonyme peut acc√©der aux donn√©es');
    }
    
    // 4. V√©rifier la structure du webhook
    console.log('\n4. üîß V√âRIFICATION DU WEBHOOK STRIPE');
    
    try {
      const webhookContent = await import('fs').then(fs => 
        fs.readFileSync('supabase/functions/stripe-webhook/index.ts', 'utf8')
      );
      
      const hasSelectedPackUpdate = webhookContent.includes('selected_pack');
      const hasPackInfoRetrieval = webhookContent.includes('packs');
      const hasSlugGeneration = webhookContent.includes('toLowerCase');
      
      console.log(`   ‚úÖ Mise √† jour selected_pack: ${hasSelectedPackUpdate ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úÖ R√©cup√©ration info pack: ${hasPackInfoRetrieval ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úÖ G√©n√©ration slug: ${hasSlugGeneration ? '‚úÖ' : '‚ùå'}`);
      
      if (hasSelectedPackUpdate && hasPackInfoRetrieval && hasSlugGeneration) {
        console.log('‚úÖ Webhook Stripe correctement configur√©');
      } else {
        console.log('‚ö†Ô∏è Webhook Stripe pourrait n√©cessiter des corrections');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier le webhook:', error.message);
    }
    
    // 5. Recommandations finales
    console.log('\n5. üí° RECOMMANDATIONS FINALES');
    
    if (unsyncedUsers === 0) {
      console.log('‚úÖ Tous les utilisateurs sont synchronis√©s!');
    } else {
      console.log(`‚ö†Ô∏è ${unsyncedUsers} utilisateur(s) non synchronis√©(s)`);
      console.log('   ‚Üí Relancez le script fix-selected-pack-sync.js');
    }
    
    console.log('\nüìã ACTIONS DE MAINTENANCE RECOMMAND√âES:');
    console.log('   1. Surveillez les logs du webhook Stripe pour les erreurs');
    console.log('   2. Testez r√©guli√®rement le processus de paiement en mode test');
    console.log('   3. V√©rifiez p√©riodiquement la synchronisation des selected_pack');
    console.log('   4. Surveillez les politiques RLS pour la s√©curit√©');
    
    // 6. Test de simulation rapide
    console.log('\n6. üß™ TEST DE SIMULATION RAPIDE');
    
    // Simuler la logique de conversion nom ‚Üí slug
    const testPackNames = ['Pack D√©couverte', 'Pack Visibilit√©', 'Pack Professionnel', 'Pack Premium'];
    console.log('Conversion nom ‚Üí slug:');
    testPackNames.forEach(name => {
      const slug = name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
      console.log(`   ${name} ‚Üí ${slug}`);
    });
    
    console.log('\nüéâ V√âRIFICATION FINALE TERMIN√âE!');
    console.log('=' .repeat(60));
    
    // R√©sum√© final
    const systemHealth = unsyncedUsers === 0 ? 'EXCELLENT' : unsyncedUsers <= 2 ? 'BON' : 'N√âCESSITE ATTENTION';
    console.log(`\nüè• √âTAT DU SYST√àME: ${systemHealth}`);
    
    if (systemHealth === 'EXCELLENT') {
      console.log('‚úÖ Le syst√®me de paiement et d\'attribution fonctionne parfaitement!');
      console.log('üí° Les utilisateurs devraient voir leurs packs corrects dans le Dashboard.');
    } else {
      console.log('‚ö†Ô∏è Le syst√®me n√©cessite quelques ajustements mineurs.');
      console.log('üîß Suivez les recommandations ci-dessus pour optimiser le syst√®me.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification finale:', error.message);
  }
}

// Ex√©cuter la v√©rification
if (process.argv[1] && process.argv[1].endsWith('final-system-verification.js')) {
  finalSystemVerification()
    .then(() => {
      console.log('\n‚úÖ V√©rification termin√©e.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export { finalSystemVerification };
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function analyzePaymentLogic() {
  try {
    console.log('üîç Analyse de la logique de paiement actuelle');
    console.log('=' .repeat(60));

    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );

    // 1. R√©cup√©rer tous les packs avec leurs prix
    console.log('\nüì¶ ANALYSE DES PACKS DISPONIBLES');
    const { data: packs, error: packsError } = await supabase
      .from('packs')
      .select('*')
      .order('price', { ascending: true });

    if (packsError) {
      console.error('‚ùå Erreur r√©cup√©ration packs:', packsError);
      return;
    }

    console.log('\nPacks disponibles:');
    packs.forEach((pack, index) => {
      console.log(`${index + 1}. ${pack.name}`);
      console.log(`   - ID: ${pack.id}`);
      console.log(`   - Prix: ${pack.price} ${pack.currency || 'XOF'}`);
      console.log(`   - R√©current: ${pack.is_recurring ? 'Oui' : 'Non'}`);
      console.log(`   - Description: ${pack.description || 'N/A'}`);
      console.log('');
    });

    // 2. Analyser la logique actuelle
    console.log('\nüîç PROBL√àMES IDENTIFI√âS DANS LA LOGIQUE ACTUELLE:');
    console.log('\n1. üö® PROBL√àME PRINCIPAL: R√©trogradation avec paiement');
    console.log('   - La fonction change-pack-with-payment force un paiement m√™me pour les downgrades');
    console.log('   - Seule exception: downgrade vers pack gratuit (prix = 0)');
    console.log('   - Exemple: Pack Premium (50000) ‚Üí Pack D√©couverte (15000) = PAIEMENT REQUIS!');
    console.log('');

    console.log('2. üîß LOGIQUE INCORRECTE:');
    console.log('   - Tous les packs payants utilisent le mode "subscription"');
    console.log('   - Pas de gestion de la diff√©rence de prix n√©gative');
    console.log('   - Pas de remboursement ou cr√©dit pour les downgrades');
    console.log('');

    console.log('3. üìã FONCTIONNALIT√âS MANQUANTES:');
    console.log('   - Pas de changement imm√©diat pour les downgrades payants');
    console.log('   - Pas de gestion de proration');
    console.log('   - Pas de syst√®me de cr√©dit/remboursement');
    console.log('   - Pas d\'annulation d\'abonnement sans paiement');
    console.log('');

    // 3. Analyser les sc√©narios possibles
    console.log('\nüìä SC√âNARIOS DE CHANGEMENT DE PACK:');
    
    const scenarios = [];
    for (let i = 0; i < packs.length; i++) {
      for (let j = 0; j < packs.length; j++) {
        if (i !== j) {
          const currentPack = packs[i];
          const newPack = packs[j];
          const priceDiff = newPack.price - currentPack.price;
          
          let changeType = '';
          let shouldRequirePayment = false;
          let recommendedAction = '';
          
          if (priceDiff > 0) {
            changeType = 'UPGRADE';
            shouldRequirePayment = true;
            recommendedAction = `Payer la diff√©rence: ${priceDiff} XOF`;
          } else if (priceDiff < 0) {
            changeType = 'DOWNGRADE';
            shouldRequirePayment = false;
            if (newPack.price === 0) {
              recommendedAction = 'Annuler abonnement + migration gratuite';
            } else {
              recommendedAction = `Cr√©dit de ${Math.abs(priceDiff)} XOF ou migration imm√©diate`;
            }
          } else {
            changeType = 'M√äME PRIX';
            shouldRequirePayment = false;
            recommendedAction = 'Migration imm√©diate';
          }
          
          scenarios.push({
            from: currentPack.name,
            to: newPack.name,
            fromPrice: currentPack.price,
            toPrice: newPack.price,
            priceDiff,
            changeType,
            shouldRequirePayment,
            recommendedAction,
            currentLogicRequiresPayment: newPack.price > 0 // Logique actuelle
          });
        }
      }
    }

    // Afficher les sc√©narios probl√©matiques
    const problematicScenarios = scenarios.filter(s => 
      s.changeType === 'DOWNGRADE' && s.currentLogicRequiresPayment && s.toPrice > 0
    );

    console.log('\nüö® SC√âNARIOS PROBL√âMATIQUES (Downgrade qui demande paiement):');
    problematicScenarios.forEach((scenario, index) => {
      console.log(`${index + 1}. ${scenario.from} ‚Üí ${scenario.to}`);
      console.log(`   Prix: ${scenario.fromPrice} ‚Üí ${scenario.toPrice} (${scenario.priceDiff} XOF)`);
      console.log(`   Logique actuelle: DEMANDE PAIEMENT ‚ùå`);
      console.log(`   Logique correcte: ${scenario.recommendedAction} ‚úÖ`);
      console.log('');
    });

    // 4. Recommandations
    console.log('\nüí° RECOMMANDATIONS POUR CORRIGER LE SYST√àME:');
    console.log('\n1. üîÑ CR√âER UN SYST√àME DE GESTION INTELLIGENT:');
    console.log('   - Upgrade: Paiement de la diff√©rence + proration');
    console.log('   - Downgrade vers gratuit: Annulation imm√©diate');
    console.log('   - Downgrade vers payant: Migration imm√©diate + cr√©dit ou remboursement');
    console.log('   - M√™me prix: Migration imm√©diate');
    console.log('');

    console.log('2. üõ†Ô∏è FONCTIONS √Ä CR√âER/MODIFIER:');
    console.log('   - smart-pack-change: Logique intelligente de changement');
    console.log('   - calculate-pack-difference: Calcul des diff√©rences et actions');
    console.log('   - handle-subscription-change: Gestion Stripe des abonnements');
    console.log('   - process-immediate-change: Changements sans paiement');
    console.log('');

    console.log('3. üéØ PRIORIT√âS:');
    console.log('   - URGENT: Corriger les downgrades qui demandent paiement');
    console.log('   - IMPORTANT: Impl√©menter la gestion de proration');
    console.log('   - MOYEN: Syst√®me de cr√©dit/remboursement');
    console.log('   - BONUS: Interface utilisateur am√©lior√©e');
    console.log('');

    console.log('‚úÖ Analyse termin√©e. Pr√™t √† impl√©menter les corrections!');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

analyzePaymentLogic();
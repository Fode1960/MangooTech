// Script pour ajouter la mise √† jour du selected_pack dans le webhook Stripe

import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';

const WEBHOOK_PATH = 'supabase/functions/stripe-webhook/index.ts';

function fixStripeWebhook() {
  try {
    console.log('üîß Correction du webhook Stripe pour mettre √† jour selected_pack...');
    
    // Lire le fichier webhook actuel
    const webhookContent = readFileSync(WEBHOOK_PATH, 'utf8');
    
    // V√©rifier si la correction est d√©j√† appliqu√©e
    if (webhookContent.includes('selected_pack')) {
      console.log('‚úÖ Le webhook contient d√©j√† la mise √† jour de selected_pack');
      return;
    }
    
    // Trouver l'endroit o√π ins√©rer le code
    const insertionPoint = 'console.log(`\\nüéâ SUCC√àS: Pack ${packId} activ√© pour l\'utilisateur ${userId}`)';
    
    if (!webhookContent.includes(insertionPoint)) {
      console.error('‚ùå Point d\'insertion non trouv√© dans le webhook');
      return;
    }
    
    // Code √† ins√©rer avant le message de succ√®s
    const codeToInsert = `
        // Mettre √† jour le selected_pack dans la table users
        console.log('\\n=== üîÑ MISE √Ä JOUR SELECTED_PACK ===');
        
        // R√©cup√©rer le nom du pack pour cr√©er le slug
        const { data: packInfo, error: packInfoError } = await supabaseClient
          .from('packs')
          .select('name')
          .eq('id', packId)
          .single();
        
        if (packInfoError) {
          console.error('‚ùå Erreur r√©cup√©ration info pack:', packInfoError);
        } else if (packInfo) {
          // Convertir le nom du pack en slug
          const packSlug = packInfo.name.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');
          console.log('Pack slug g√©n√©r√©:', packSlug);
          
          // Mettre √† jour le selected_pack de l'utilisateur
          const { error: updateSelectedPackError } = await supabaseClient
            .from('users')
            .update({ selected_pack: packSlug })
            .eq('id', userId);
          
          if (updateSelectedPackError) {
            console.error('‚ùå Erreur mise √† jour selected_pack:', updateSelectedPackError);
          } else {
            console.log('‚úÖ selected_pack mis √† jour:', packSlug);
          }
        }
`;
    
    // Ins√©rer le code
    const updatedContent = webhookContent.replace(
      insertionPoint,
      codeToInsert + '\n        ' + insertionPoint
    );
    
    // √âcrire le fichier modifi√©
    writeFileSync(WEBHOOK_PATH, updatedContent, 'utf8');
    
    console.log('‚úÖ Webhook Stripe mis √† jour avec succ√®s!');
    console.log('üí° Le webhook mettra maintenant √† jour automatiquement le selected_pack');
    
    // Afficher un r√©sum√© des changements
    console.log('\nüìã CHANGEMENTS APPORT√âS:');
    console.log('   - Ajout de la r√©cup√©ration des informations du pack');
    console.log('   - G√©n√©ration automatique du slug du pack');
    console.log('   - Mise √† jour du champ selected_pack dans la table users');
    console.log('   - Logs d√©taill√©s pour le debugging');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction du webhook:', error.message);
  }
}

// Ex√©cuter la correction
if (process.argv[1] && process.argv[1].endsWith('fix-stripe-webhook-selected-pack.js')) {
  fixStripeWebhook();
}

export { fixStripeWebhook };
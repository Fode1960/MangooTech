import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-user-id',
}

interface ImmediateChangeRequest {
  newPackId: string
  reason?: string
  cancelSubscription?: boolean
}

interface ImmediateChangeResult {
  success: boolean
  message: string
  newPack: any
  previousPack?: any
  subscriptionCancelled?: boolean
  creditApplied?: number
  effectiveDate: string
  nextBillingDate?: string
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // V√©rifier si c'est un appel avec service key et x-user-id header
    const userIdHeader = req.headers.get('x-user-id')
    const authHeader = req.headers.get('Authorization')
    const isServiceKeyCall = authHeader?.includes(Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '')
    
    let userId: string
    let supabaseClient: any
    
    if (isServiceKeyCall && userIdHeader) {
      // Mode service key avec user ID sp√©cifi√©
      console.log('üîë Mode service key d√©tect√© avec user ID:', userIdHeader)
      userId = userIdHeader
      supabaseClient = createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
      )
    } else {
      // Mode authentification utilisateur normal
      supabaseClient = createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_ANON_KEY') ?? '',
        {
          global: {
            headers: { Authorization: req.headers.get('Authorization')! },
          },
        }
      )

      const {
        data: { user },
      } = await supabaseClient.auth.getUser()

      if (!user) {
        throw new Error('Non autoris√©')
      }
      
      userId = user.id
    }

    const { newPackId, reason, cancelSubscription }: ImmediateChangeRequest = await req.json()

    if (!newPackId) {
      throw new Error('Nouveau pack ID requis')
    }

    console.log(`\n=== ‚ö° CHANGEMENT IMM√âDIAT DE PACK ===`)
    console.log(`Utilisateur: ${userId}`)
    console.log(`Nouveau pack: ${newPackId}`)
    console.log(`Raison: ${reason || 'Non sp√©cifi√©e'}`)
    console.log(`Annuler abonnement: ${cancelSubscription || false}`)

    // 1. R√©cup√©rer le nouveau pack
    const { data: newPack, error: newPackError } = await supabaseClient
      .from('packs')
      .select('*')
      .eq('id', newPackId)
      .single()

    if (newPackError || !newPack) {
      throw new Error('Nouveau pack non trouv√©')
    }

    // 2. R√©cup√©rer le pack actuel de l'utilisateur
    const { data: currentUserPacks } = await supabaseClient
      .from('user_packs')
      .select(`
        *,
        packs!inner(*)
      `)
      .eq('user_id', userId)
      .eq('status', 'active')

    let previousPack = null
    let subscriptionCancelled = false
    let creditApplied = 0

    // 3. D√©sactiver tous les packs actuels
    if (currentUserPacks && currentUserPacks.length > 0) {
      console.log(`\nüì¶ D√©sactivation de ${currentUserPacks.length} pack(s) actuel(s)`)
      
      for (const userPack of currentUserPacks) {
        previousPack = userPack.packs
        
        // Calculer le cr√©dit si applicable
        if (userPack.started_at && userPack.packs.price > 0) {
          const startDate = new Date(userPack.started_at)
          const now = new Date()
          const nextBillingDate = new Date(startDate)
          nextBillingDate.setMonth(nextBillingDate.getMonth() + 1)
          
          const totalDays = Math.ceil((nextBillingDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
          const daysUsed = Math.ceil((now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
          const daysRemaining = Math.max(0, totalDays - daysUsed)
          
          if (daysRemaining > 0) {
            const dailyRate = userPack.packs.price / totalDays
            creditApplied = Math.floor(dailyRate * daysRemaining)
            console.log(`üí∞ Cr√©dit calcul√©: ${creditApplied} XOF pour ${daysRemaining} jours restants`)
          }
        }
        
        // D√©sactiver le pack
        const { error: deactivateError } = await supabaseClient
          .from('user_packs')
          .update({ 
            status: 'inactive',
            ended_at: new Date().toISOString()
          })
          .eq('id', userPack.id)

        if (deactivateError) {
          console.error(`‚ùå Erreur d√©sactivation pack ${userPack.id}:`, deactivateError)
        } else {
          console.log(`‚úÖ Pack ${userPack.packs.name} d√©sactiv√©`)
        }

        // Note: Logique d'annulation Stripe √† impl√©menter si n√©cessaire
        // La colonne stripe_subscription_id n'existe pas dans user_packs
        if (cancelSubscription) {
          console.log(`‚ÑπÔ∏è Annulation d'abonnement demand√©e mais pas impl√©ment√©e`)
        }
      }
    }

    // 4. Activer le nouveau pack
    console.log(`\nüéØ Activation du nouveau pack: ${newPack.name}`)
    console.log(`User ID: ${userId}`)
    console.log(`Pack ID: ${newPack.id}`)
    
    const insertData = {
      user_id: userId,
      pack_id: newPack.id,
      status: 'active',
      started_at: new Date().toISOString()
      // Note: metadata n'existe pas dans user_packs, les infos sont logg√©es
    }
    
    console.log('Donn√©es √† ins√©rer/mettre √† jour:', JSON.stringify(insertData, null, 2))
    
    // Utiliser upsert pour √©viter les erreurs de contrainte unique
    const { data: newUserPack, error: activateError } = await supabaseClient
      .from('user_packs')
      .upsert(insertData, {
        onConflict: 'user_id,pack_id',
        ignoreDuplicates: false
      })
      .select()
      .single()

    if (activateError) {
      console.error('‚ùå Erreur d√©taill√©e activation:', activateError)
      throw new Error(`Erreur activation nouveau pack: ${activateError.message}`)
    }
    
    console.log('‚úÖ Nouveau pack activ√©:', newUserPack.id)

    // 5. Mettre √† jour le selected_pack de l'utilisateur
    const packSlug = newPack.name.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')

    const { error: updateUserError } = await supabaseClient
      .from('users')
      .update({ selected_pack: packSlug })
      .eq('id', userId)

    if (updateUserError) {
      console.error(`‚ö†Ô∏è Erreur mise √† jour selected_pack:`, updateUserError)
    } else {
      console.log(`‚úÖ selected_pack mis √† jour: ${packSlug}`)
    }

    // 6. Enregistrer le cr√©dit si applicable
    if (creditApplied > 0) {
      console.log(`\nüí∞ Enregistrement cr√©dit: ${creditApplied} XOF`)
      
      const creditData = {
        user_id: userId,
        amount: creditApplied,
        type: 'pack_downgrade',
        description: `Cr√©dit pour changement de ${previousPack?.name} vers ${newPack.name}`,
        created_at: new Date().toISOString(),
        expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // Expire dans 1 an
      }
      
      console.log('Donn√©es cr√©dit:', JSON.stringify(creditData, null, 2))
      
      const { error: creditError } = await supabaseClient
        .from('user_credits')
        .insert(creditData)

      if (creditError) {
        console.error(`‚ùå Erreur d√©taill√©e cr√©dit:`, creditError)
        // Ne pas faire √©chouer la transaction pour un probl√®me de cr√©dit
      } else {
        console.log(`‚úÖ Cr√©dit de ${creditApplied} XOF enregistr√©`)
      }
    } else {
      console.log('\nüí∞ Aucun cr√©dit √† appliquer')
    }

    const result: ImmediateChangeResult = {
      success: true,
      message: `Pack chang√© avec succ√®s vers ${newPack.name}`,
      newPack,
      previousPack,
      subscriptionCancelled,
      creditApplied: creditApplied > 0 ? creditApplied : undefined,
      effectiveDate: new Date().toISOString(),
      nextBillingDate: newPack.price > 0 ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() : undefined
    }

    console.log(`\n=== ‚úÖ CHANGEMENT TERMIN√â ===`)
    console.log(`Nouveau pack: ${newPack.name}`)
    console.log(`Cr√©dit appliqu√©: ${creditApplied} XOF`)
    console.log(`Abonnement annul√©: ${subscriptionCancelled}`)

    return new Response(
      JSON.stringify(result),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    )

  } catch (error) {
    console.error('‚ùå Erreur dans process-immediate-change:', error)
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      }
    )
  }
})

// Fonction utilitaire pour cr√©er une table user_credits si elle n'existe pas
async function ensureUserCreditsTable(supabaseClient: any) {
  try {
    const { data, error } = await supabaseClient
      .from('user_credits')
      .select('id')
      .limit(1)
    
    if (error && error.code === 'PGRST116') {
      console.log('üìã Table user_credits n\'existe pas, cr√©ation recommand√©e')
      // La table n'existe pas, mais on ne peut pas la cr√©er depuis une fonction
      // Il faudra la cr√©er manuellement ou via une migration
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier la table user_credits')
  }
}
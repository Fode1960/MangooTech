import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://ptrqhtwstldphjaraufi.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB0cnFodHdzdGxkcGhqYXJhdWZpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ5MzI0OTIsImV4cCI6MjA3MDUwODQ5Mn0.Wc-dKWVMpAyFoAPFGejzhD0o1rodyEGrBlZK5X3muyA'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function createRemainingTables() {
  console.log('üîß Cr√©ation des tables manquantes...')
  
  try {
    // V√©rifier quelles tables existent
    const tablesToCheck = ['packs', 'pack_services', 'user_packs', 'user_services']
    
    for (const tableName of tablesToCheck) {
      console.log(`\nüîç V√©rification de la table ${tableName}...`)
      
      const { data, error } = await supabase
        .from(tableName)
        .select('count')
        .limit(1)
      
      if (error) {
        console.log(`‚ùå Table ${tableName} n'existe pas:`, error.message)
      } else {
        console.log(`‚úÖ Table ${tableName} existe d√©j√†`)
      }
    }
    
    // Essayer d'ins√©rer des packs de test
    console.log('\nüì¶ Tentative d\'insertion des packs...')
    
    const testPacks = [
      {
        name: 'Pack D√©couverte',
        description: 'Nouveaux artisans',
        price: 0,
        is_popular: false,
        sort_order: 1
      },
      {
        name: 'Pack Visibilit√©',
        description: 'Artisans en phase de croissance',
        price: 5000,
        is_popular: true,
        sort_order: 2
      },
      {
        name: 'Pack Professionnel',
        description: 'Artisans organis√©s, organisations, PME',
        price: 10000,
        is_popular: false,
        sort_order: 3
      },
      {
        name: 'Pack Premium',
        description: 'PME structur√©es et entrepreneurs avanc√©s',
        price: 15000,
        is_popular: false,
        sort_order: 4
      }
    ]
    
    const { data: packsData, error: packsError } = await supabase
      .from('packs')
      .insert(testPacks)
    
    if (packsError) {
      console.log('‚ö†Ô∏è Erreur lors de l\'insertion des packs:', packsError.message)
      console.log('\nüìã Les tables doivent √™tre cr√©√©es manuellement.')
      console.log('\nüìã Instructions:')
      console.log('1. Allez sur https://supabase.com/dashboard')
      console.log('2. S√©lectionnez votre projet')
      console.log('3. Allez dans "SQL Editor"')
      console.log('4. Ex√©cutez les requ√™tes SQL suivantes:')
      
      console.log('\n-- Cr√©er la table packs:')
      console.log(`
CREATE TABLE IF NOT EXISTS packs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) DEFAULT 0,
  currency VARCHAR(10) DEFAULT 'FCFA',
  billing_period VARCHAR(20) DEFAULT 'monthly',
  is_popular BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  sort_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);`)
      
      console.log('\n-- Cr√©er la table pack_services:')
      console.log(`
CREATE TABLE IF NOT EXISTS pack_services (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  pack_id UUID REFERENCES packs(id) ON DELETE CASCADE,
  service_id UUID REFERENCES services(id) ON DELETE CASCADE,
  is_included BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(pack_id, service_id)
);`)
      
      console.log('\n-- Cr√©er la table user_packs:')
      console.log(`
CREATE TABLE IF NOT EXISTS user_packs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  pack_id UUID REFERENCES packs(id) ON DELETE CASCADE,
  status VARCHAR(20) DEFAULT 'active',
  started_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  expires_at TIMESTAMP WITH TIME ZONE,
  next_billing_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);`)
      
      console.log('\n-- Cr√©er la table user_services:')
      console.log(`
CREATE TABLE IF NOT EXISTS user_services (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  service_id UUID REFERENCES services(id) ON DELETE CASCADE,
  pack_id UUID REFERENCES packs(id) ON DELETE CASCADE,
  status VARCHAR(20) DEFAULT 'active',
  service_url VARCHAR(500),
  visits_count INTEGER DEFAULT 0,
  sales_count INTEGER DEFAULT 0,
  revenue_amount DECIMAL(10,2) DEFAULT 0,
  last_activity_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, service_id)
);`)
      
      console.log('\n-- Ins√©rer les packs de base:')
      console.log(`
INSERT INTO packs (name, description, price, is_popular, sort_order) VALUES
('Pack D√©couverte', 'Nouveaux artisans', 0, false, 1),
('Pack Visibilit√©', 'Artisans en phase de croissance', 5000, true, 2),
('Pack Professionnel', 'Artisans organis√©s, organisations, PME', 10000, false, 3),
('Pack Premium', 'PME structur√©es et entrepreneurs avanc√©s', 15000, false, 4);`)
      
    } else {
      console.log('‚úÖ Packs ins√©r√©s avec succ√®s!')
      
      // V√©rifier les packs cr√©√©s
      const { data: allPacks, error: allPacksError } = await supabase
        .from('packs')
        .select('*')
      
      if (!allPacksError && allPacks) {
        console.log(`\nüìä Total des packs: ${allPacks.length}`)
        allPacks.forEach(pack => {
          console.log(`- ${pack.name}: ${pack.description} (${pack.price} FCFA)`)
        })
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error)
  }
}

createRemainingTables()
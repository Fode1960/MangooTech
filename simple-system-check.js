// Script de v√©rification simple du syst√®me sans jointures complexes

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

// Utiliser la cl√© de service pour bypasser RLS
const supabaseAdmin = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function simpleSystemCheck() {
  try {
    console.log('üîç V√âRIFICATION SIMPLE DU SYST√àME');
    console.log('=' .repeat(50));
    
    // 1. Statistiques de base
    console.log('\n1. üìä STATISTIQUES DE BASE');
    
    const { data: users, error: usersError } = await supabaseAdmin
      .from('users')
      .select('id, email, selected_pack');
    
    const { data: userPacks, error: userPacksError } = await supabaseAdmin
      .from('user_packs')
      .select('user_id, pack_id, status');
    
    const { data: packs, error: packsError } = await supabaseAdmin
      .from('packs')
      .select('id, name, price');
    
    const { data: userServices, error: userServicesError } = await supabaseAdmin
      .from('user_services')
      .select('user_id, service_id, status');
    
    if (usersError) {
      console.error('‚ùå Erreur users:', usersError.message);
    } else {
      console.log(`üë• Total utilisateurs: ${users?.length || 0}`);
    }
    
    if (userPacksError) {
      console.error('‚ùå Erreur user_packs:', userPacksError.message);
    } else {
      const activePacks = userPacks?.filter(up => up.status === 'active') || [];
      console.log(`üì¶ Total user_packs: ${userPacks?.length || 0}`);
      console.log(`üì¶ Packs actifs: ${activePacks.length}`);
    }
    
    if (packsError) {
      console.error('‚ùå Erreur packs:', packsError.message);
    } else {
      console.log(`üéÅ Packs disponibles: ${packs?.length || 0}`);
      packs?.forEach(pack => {
        console.log(`   - ${pack.name}: ${pack.price} FCFA`);
      });
    }
    
    if (userServicesError) {
      console.error('‚ùå Erreur user_services:', userServicesError.message);
    } else {
      const activeServices = userServices?.filter(us => us.status === 'active') || [];
      console.log(`üîß Services utilisateur actifs: ${activeServices.length}`);
    }
    
    // 2. V√©rification de la synchronisation selected_pack
    console.log('\n2. üîÑ V√âRIFICATION SYNCHRONISATION SELECTED_PACK');
    
    if (users && userPacks && packs) {
      let syncedCount = 0;
      let unsyncedCount = 0;
      
      // Cr√©er des maps pour faciliter les lookups
      const packMap = new Map(packs.map(p => [p.id, p]));
      const activeUserPacksMap = new Map();
      
      // Grouper les packs actifs par utilisateur
      userPacks
        .filter(up => up.status === 'active')
        .forEach(up => {
          if (!activeUserPacksMap.has(up.user_id)) {
            activeUserPacksMap.set(up.user_id, []);
          }
          activeUserPacksMap.get(up.user_id).push(up);
        });
      
      console.log('\nüìã D√©tail par utilisateur:');
      
      users.forEach((user, index) => {
        const userActivePacks = activeUserPacksMap.get(user.id) || [];
        
        if (userActivePacks.length > 0) {
          // Prendre le premier pack actif
          const activePack = userActivePacks[0];
          const pack = packMap.get(activePack.pack_id);
          
          if (pack) {
            const packSlug = pack.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
            const isSync = user.selected_pack === packSlug;
            
            console.log(`   ${index + 1}. ${user.email}`);
            console.log(`      selected_pack: ${user.selected_pack}`);
            console.log(`      pack actif: ${packSlug} (${pack.name})`);
            console.log(`      synchronis√©: ${isSync ? '‚úÖ' : '‚ùå'}`);
            
            if (isSync) {
              syncedCount++;
            } else {
              unsyncedCount++;
            }
          }
        } else {
          console.log(`   ${index + 1}. ${user.email}`);
          console.log(`      selected_pack: ${user.selected_pack}`);
          console.log(`      pack actif: aucun`);
          console.log(`      synchronis√©: ${user.selected_pack === 'free' ? '‚úÖ' : '‚ùå'}`);
          
          if (user.selected_pack === 'free') {
            syncedCount++;
          } else {
            unsyncedCount++;
          }
        }
      });
      
      console.log(`\nüìà R√©sum√© synchronisation:`);
      console.log(`   ‚úÖ Utilisateurs synchronis√©s: ${syncedCount}`);
      console.log(`   ‚ùå Utilisateurs non synchronis√©s: ${unsyncedCount}`);
      
      // 3. √âtat du syst√®me
      console.log('\n3. üè• √âTAT DU SYST√àME');
      
      const systemHealth = unsyncedCount === 0 ? 'EXCELLENT' : 
                          unsyncedCount <= 2 ? 'BON' : 'N√âCESSITE ATTENTION';
      
      console.log(`√âtat: ${systemHealth}`);
      
      if (systemHealth === 'EXCELLENT') {
        console.log('‚úÖ Tous les utilisateurs sont correctement synchronis√©s!');
        console.log('üí° Le Dashboard devrait afficher les bons packs pour tous.');
      } else {
        console.log(`‚ö†Ô∏è ${unsyncedCount} utilisateur(s) n√©cessitent une resynchronisation.`);
        console.log('üîß Relancez le script fix-selected-pack-sync.js si n√©cessaire.');
      }
    }
    
    // 4. V√©rification du webhook
    console.log('\n4. üîß V√âRIFICATION DU WEBHOOK');
    
    try {
      const fs = await import('fs');
      const webhookContent = fs.readFileSync('supabase/functions/stripe-webhook/index.ts', 'utf8');
      
      const hasSelectedPackUpdate = webhookContent.includes('selected_pack');
      console.log(`   Mise √† jour selected_pack: ${hasSelectedPackUpdate ? '‚úÖ' : '‚ùå'}`);
      
      if (hasSelectedPackUpdate) {
        console.log('‚úÖ Webhook configur√© pour mettre √† jour selected_pack');
      } else {
        console.log('‚ö†Ô∏è Webhook ne met pas √† jour selected_pack automatiquement');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier le webhook:', error.message);
    }
    
    // 5. Recommandations
    console.log('\n5. üí° RECOMMANDATIONS');
    console.log('   1. Testez un paiement en mode test pour v√©rifier le webhook');
    console.log('   2. Surveillez les logs Stripe pour les erreurs');
    console.log('   3. V√©rifiez p√©riodiquement la synchronisation');
    console.log('   4. Red√©ployez les fonctions Supabase si n√©cessaire');
    
    console.log('\nüéâ V√©rification termin√©e!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  }
}

// Ex√©cuter la v√©rification
if (process.argv[1] && process.argv[1].endsWith('simple-system-check.js')) {
  simpleSystemCheck()
    .then(() => {
      console.log('\n‚úÖ Script termin√©.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export { simpleSystemCheck };
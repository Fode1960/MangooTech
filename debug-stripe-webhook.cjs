const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugStripeWebhook(userEmail) {
  try {
    console.log('üîç Diagnostic du webhook Stripe pour:', userEmail);
    console.log('=' .repeat(60));

    // 1. R√©cup√©rer l'utilisateur
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('email', userEmail)
      .single();

    if (userError || !user) {
      console.error('‚ùå Utilisateur non trouv√©:', userError?.message);
      return;
    }

    console.log('üë§ Utilisateur trouv√©:');
    console.log('  - ID:', user.id);
    console.log('  - Email:', user.email);
    console.log('  - Selected pack:', user.selected_pack);
    console.log('');

    // 2. V√©rifier les packs de l'utilisateur
    const { data: userPacks, error: packsError } = await supabase
      .from('user_packs')
      .select(`
        *,
        packs:pack_id (
          id,
          name,
          price,
          description
        )
      `)
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (packsError) {
      console.error('‚ùå Erreur r√©cup√©ration packs:', packsError.message);
      return;
    }

    console.log('üì¶ Packs de l\'utilisateur:');
    if (userPacks && userPacks.length > 0) {
      userPacks.forEach((pack, index) => {
        console.log(`  Pack ${index + 1}:`);
        console.log(`    - Nom: ${pack.packs?.name}`);
        console.log(`    - Status: ${pack.status}`);
        console.log(`    - Stripe Session ID: ${pack.stripe_session_id || 'N/A'}`);
        console.log(`    - Cr√©√© le: ${pack.created_at}`);
        console.log(`    - Mis √† jour le: ${pack.updated_at}`);
        console.log('');
      });
    } else {
      console.log('  Aucun pack trouv√©');
    }

    // 3. V√©rifier les services actifs
    const { data: activeServices, error: servicesError } = await supabase
      .from('user_services')
      .select(`
        *,
        services:service_id (
          id,
          name,
          pack_id
        )
      `)
      .eq('user_id', user.id)
      .eq('status', 'active');

    if (servicesError) {
      console.error('‚ùå Erreur r√©cup√©ration services:', servicesError.message);
    } else {
      console.log('üîß Services actifs:', activeServices?.length || 0);
      if (activeServices && activeServices.length > 0) {
        // Grouper par pack
        const servicesByPack = {};
        activeServices.forEach(service => {
          const packId = service.services?.pack_id;
          if (!servicesByPack[packId]) {
            servicesByPack[packId] = [];
          }
          servicesByPack[packId].push(service.services?.name);
        });

        Object.entries(servicesByPack).forEach(([packId, services]) => {
          console.log(`  Pack ${packId}: ${services.length} services`);
          services.forEach(serviceName => {
            console.log(`    - ${serviceName}`);
          });
        });
      }
    }
    console.log('');

    // 4. V√©rifier les logs r√©cents (si disponibles)
    console.log('üìã Recommandations de diagnostic:');
    console.log('1. V√©rifiez les logs Supabase Edge Functions pour le webhook Stripe');
    console.log('2. V√©rifiez que le webhook Stripe est correctement configur√©');
    console.log('3. Testez un paiement et surveillez les logs en temps r√©el');
    console.log('4. V√©rifiez que les m√©tadonn√©es sont correctement envoy√©es √† Stripe');
    console.log('');

    // 5. V√©rifier la configuration Stripe
    console.log('üîß Points √† v√©rifier dans Stripe:');
    console.log('- URL du webhook: https://[votre-projet].supabase.co/functions/v1/stripe-webhook');
    console.log('- √âv√©nements √©cout√©s: checkout.session.completed, invoice.payment_succeeded');
    console.log('- Secret du webhook configur√© dans les variables d\'environnement');
    console.log('');

    // 6. Suggestions de test
    console.log('üß™ Test sugg√©r√©:');
    console.log('1. Effectuer un paiement test');
    console.log('2. V√©rifier imm√©diatement les logs Supabase');
    console.log('3. V√©rifier si les m√©tadonn√©es user_id et pack_id sont pr√©sentes');
    console.log('4. V√©rifier si le webhook re√ßoit l\'√©v√©nement checkout.session.completed');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
  }
}

// Utilisation
const userEmail = process.argv[2];
if (!userEmail) {
  console.error('Usage: node debug-stripe-webhook.cjs <email>');
  process.exit(1);
}

debugStripeWebhook(userEmail);